#!/usr/bin/env python

######################################
# authors G.Madalozzo
# date 26 May 2014 16:38:17
#
# Dijkstra's generation
######################################

import sys
import fileinput
import os

def createDivider():
	dividerFile.write("#include <stdlib.h>\n")
	dividerFile.write("#include <stdio.h>\n")
	dividerFile.write('#include "MPIe.h"\n')
	dividerFile.write('#include "tasks_comm.h"\n')
	dividerFile.write("\n#define NUM_NODES                  16		//16 for small input; 160 for large input; 30 for medium input;\n")
	dividerFile.write("#define MAXPROCESSORS			   64		//The amount of processor\n")
	dividerFile.write("#define NPROC 						"+str(num_tasks-1)+"\n")
	dividerFile.write("\nint PROCESSORS;\n")
	dividerFile.write("int pthread_n_workers;\n")
	dividerFile.write("int paths;\n")
	dividerFile.write("int tasks[MAXPROCESSORS][2];\n")
	dividerFile.write("int nodes_tasks[NUM_NODES*(NUM_NODES-1)/2][2];\n")
	dividerFile.write("int AdjMatrix[NUM_NODES][NUM_NODES];\n")
	dividerFile.write("int *result;\n")
	dividerFile.write("int ended = 0;\n")
	dividerFile.write("\nvoid startThreads(void) {\n")
	dividerFile.write("\tint i, j;\n")
	dividerFile.write("\tMessage msg;\n")
	dividerFile.write("\n\t/* SEND nodes_tasks[NUM_NODES*(NUM_NODES-1)/2][2] */\n")
	dividerFile.write("\tmsg.length = NUM_NODES*(NUM_NODES-1)/2;\n")
	dividerFile.write("\t// Send X of nodes_tasks\n")
	dividerFile.write("\tfor (i=0; i<(NUM_NODES*(NUM_NODES-1)/2); i++)\n")
	dividerFile.write("\t\tmsg.msg[i] = nodes_tasks[i][0];\n")
	for x in range(num_tasks-1):
		dividerFile.write("\tSend(msg, dijkstra_"+str(x)+"b);\n")
	dividerFile.write("\n\t// Send Y of nodes_tasks\n")
	dividerFile.write("\tfor (i=0; i<(NUM_NODES*(NUM_NODES-1)/2); i++)\n")
	dividerFile.write("\t\tmsg.msg[i] = nodes_tasks[i][1];\n")
	for x in range(num_tasks-1):
		dividerFile.write("\tSend(msg, dijkstra_"+str(x)+"b);\n")
	dividerFile.write("\n\t/* SEND tasks[MAXPROCESSORS][2] */\n")
	dividerFile.write("\tmsg.length = MAXPROCESSORS;\n")
	dividerFile.write("\t// Send X of tasks\n")
	dividerFile.write("\tfor (i=0; i<MAXPROCESSORS; i++)\n")
	dividerFile.write("\t\tmsg.msg[i] = tasks[i][0];\n")
	for x in range(num_tasks-1):
		dividerFile.write("\tSend(msg, dijkstra_"+str(x)+"b);\n")
	dividerFile.write("\n\t// Send Y of tasks\n")
	dividerFile.write("\tfor (i=0; i<MAXPROCESSORS; i++)\n")
	dividerFile.write("\t\tmsg.msg[i] = tasks[i][1];\n")
	for x in range(num_tasks-1):
		dividerFile.write("\tSend(msg, dijkstra_"+str(x)+"b);\n")
	dividerFile.write("\n\t/* SEND AdjMatrix[NUM_NODES][NUM_NODES] */\n")
	dividerFile.write("\tmsg.length = NUM_NODES;\n")
	dividerFile.write("\tfor (i=0; i<NUM_NODES; i++) {\n")
	dividerFile.write('\t\t//MADA ECHO(" SEND: ");\n')
	dividerFile.write("\t\tfor (j=0; j<NUM_NODES; j++) {\n")
	dividerFile.write("\t\t\tmsg.msg[j] = AdjMatrix[j][i];\n")
	dividerFile.write("\t\t\t//MADA ECHO(itoa(msg.msg[j]));\n")
	dividerFile.write('\t\t\t//MADA ECHO(" ");\n')
	dividerFile.write("\t\t}\n")
	for x in range(num_tasks-1):
		dividerFile.write("\t\tSend(msg, dijkstra_"+str(x)+"b);\n")
	dividerFile.write('\t\t//MADA ECHO("\\n");\n')
	dividerFile.write("\t}\n")
	dividerFile.write("}\n")
	dividerFile.write("\nvoid divide_task_group(int task) {\n")
	dividerFile.write("\tint i;\n")
	dividerFile.write("\tfor(i=0;i<PROCESSORS;i++){\n")
	dividerFile.write("\t\ttasks[i][0] = task/PROCESSORS* (i);\n")
	dividerFile.write("\t\ttasks[i][1] = task/PROCESSORS* (i+1) + (i+1==PROCESSORS&task%PROCESSORS!=0?task%PROCESSORS:0);\n")
	dividerFile.write("\t}\n")
	dividerFile.write("}\n")
	dividerFile.write("\nvoid ProcessMessage() {\n")
	dividerFile.write("\tint paths = 0;\n")
	dividerFile.write("\n\tif (result[0] == -1) {\n")
	dividerFile.write("\t\tended++;\n")
	dividerFile.write('\t\tprintf("\\nENDED %d", ended);\n')
	dividerFile.write("\t\t//MADA ECHO(itoa(GetTick()));\n")
	dividerFile.write('\t\t//MADA ECHO("Divider finished.");\n')
	dividerFile.write("\t}\n")
	dividerFile.write("\telse {\n")
	dividerFile.write('\tprintf("From %d to %d, shortest path is %d in cost. Path is: %d", result[0]+1, result[1]+1, result[2], result[0]+1);')
	dividerFile.write('\t\t//MADA ECHO("From ");\n')
	dividerFile.write("\t\t//MADA ECHO(itoa(result[0]+1));\n")
	dividerFile.write('\t\t//MADA ECHO(" to ");\n')
	dividerFile.write("\t\t//MADA ECHO(itoa(result[1]+1));\n")
	dividerFile.write('\t\t//MADA ECHO(", shortest path is ");\n')
	dividerFile.write("\t\t//MADA ECHO(itoa(result[2]));\n")
	dividerFile.write('\t\t//MADA ECHO(" in cost. ");\n')
	dividerFile.write('\t\t//MADA ECHO("Path is: ");\n')
	dividerFile.write("\t\t//MADA ECHO(itoa(result[0]+1));\n")
	dividerFile.write("\t\tfor(paths=3; paths<33; paths++) {\n")
	dividerFile.write("\t\t\tif (result[paths] > 0) {\n")
	dividerFile.write('\t\t\t\tprintf(" %d", result[paths]);\n')
	dividerFile.write("\t\t\t}\n")
	dividerFile.write("\t\t}\n")
	dividerFile.write('\t\tprintf("\\n");\n')
	dividerFile.write("\t}\n")
	dividerFile.write("}\n")
	dividerFile.write("\nint main0(int argc, char *argv[]) {\n")
	dividerFile.write("\tint i=0,j=0,k=0;\n")
	dividerFile.write("\n\tint fpTrix[NUM_NODES*NUM_NODES] = { 0,    6,    3,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t6,    0,    2,    5,    9999, 9999, 1,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t3,    2,    0,    3,    4,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 5,    3,    0,    2,    3,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 4,    2,    0,    5,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 3,    5,    0,    3,    2,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 1,    9999, 9999, 9999, 3,    0,    4,    9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 2,    4,    0,    7,    9999, 9999, 9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 7,    0,    5,    1,    9999, 9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 5,    0,    9999, 3,    9999, 9999, 9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 1,    9999, 0,    9999, 4,    9999, 9999, 8,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 3,    9999, 0,    9999, 2,    9999, 9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 4,    9999, 0,    1,    9999, 2,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 2,    1,    0,    6,    9999,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 6,    0,    3,\n")
	dividerFile.write("\t\t\t\t\t\t\t\t\t\t9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 8,    9999, 2,    9999, 3,    0 };\n")
	dividerFile.write("\n\t/* Step 1: geting the working vertexs and assigning values */\n")
	dividerFile.write("\tfor (i=0;i<NUM_NODES;i++) {\n")
	dividerFile.write('\t\t//MADA ECHO(" MATRIX: ");\n')
	dividerFile.write("\t\tfor (j=0;j<NUM_NODES;j++) {\n")
	dividerFile.write("\t\t\tAdjMatrix[i][j]= fpTrix[k];\n")
	dividerFile.write("\t\t\t//MADA ECHO(itoa(AdjMatrix[i][j]));\n")
	dividerFile.write('\t\t\t//MADA ECHO(" ");\n')
	dividerFile.write("\t\t\tk++;\n")
	dividerFile.write("\t\t}\n")
	dividerFile.write('\t\t//MADA ECHO("\\n");\n')
	dividerFile.write("\t}\n")
	dividerFile.write("\n\tint tasks = NUM_NODES*(NUM_NODES-1)/2;\n")
	dividerFile.write("\n\tint x=0;\n")
	dividerFile.write("\tfor(i=0;i<NUM_NODES-1;i++){ //small:15; large:159\n")
	dividerFile.write("\t\tfor(j=i+1;j<NUM_NODES;j++){	//small:16; large:160\n")
	dividerFile.write("\t\t\tnodes_tasks[x][0] = i;\n")
	dividerFile.write("\t\t\tnodes_tasks[x][1] = j;\n")
	dividerFile.write("\t\t\tx++;\n")
	dividerFile.write("\t\t}\n")
	dividerFile.write("\t}\n")
	dividerFile.write("\n\tdivide_task_group(tasks);\n")
	dividerFile.write("\tstartThreads();\n")
	dividerFile.write('\n\t//MADA ECHO("\\n");\n')
	dividerFile.write("\tMessage msg;\n")
	dividerFile.write("\tmsg.length = 33;\n")
	dividerFile.write("\twhile (1) {\n")
	for x in range(num_tasks-1):
		dividerFile.write("\t\tmsg = Receive(); //MADAmsg, dijkstra_"+str(x)+"b);\n")
		dividerFile.write("\t\tfor (k=0; k<33; k++)\n")
		dividerFile.write("\t\t\tresult[k] = msg.msg[k];\n")
		dividerFile.write("\t\tProcessMessage();\n")
	dividerFile.write("\n\t\tif (ended == (NPROC)) {\n")
	dividerFile.write("\t\t\treturn 0;\n")
	dividerFile.write("\t\t}\n")
	dividerFile.write("\t}\n")
	dividerFile.write("\n\treturn 0;\n")
	dividerFile.write("}\n")
	dividerFile.write("\nint main(int argc, char *argv[])\n")
	dividerFile.write("{\n")
	dividerFile.write("MemoryWrite(INITIALIZE_ROUTER, 0);")
	dividerFile.write("\tint m_argc,size,i;\n")
	dividerFile.write("\tchar *m_argv[3];\n")
	dividerFile.write("\n\tpthread_n_workers = NPROC;\n")
	dividerFile.write("\n\tPROCESSORS = pthread_n_workers;\n")
	dividerFile.write("\n\tm_argc = 2;\n")
	dividerFile.write('\tm_argv[1] = "input_small.dat";\n')
	dividerFile.write("\n\tmain0(m_argc,m_argv);\n")
	dividerFile.write("MemoryWrite(END_SIM, 0);")
	dividerFile.write("\n\treturn 0;\n")
	dividerFile.write("}\n")

def createDijkstra():
	dijkstraFile.write("#include <stdlib.h>\n")
	dijkstraFile.write("#include <stdio.h>\n")
	dijkstraFile.write('#include "MPIe.h"\n')
	dijkstraFile.write('#include "tasks_comm.h"\n')
	dijkstraFile.write("\n#define NONE                       9999		//Maximum\n")
	dijkstraFile.write("#define MAXPROCESSORS			   64		//The amount of processor\n")
	dijkstraFile.write("#define NUM_NODES                  16		//16 for small input; 160 for large input; 30 for medium input;\n")
	dijkstraFile.write("\nint rank = "+str(IdTask)+";\n")
	dijkstraFile.write("\nstruct _NODE{\n")
	dijkstraFile.write("\tint iDist;\n")
	dijkstraFile.write("\tint iPrev;\n")
	dijkstraFile.write("\tint iCatched;\n")
	dijkstraFile.write("};\n")
	dijkstraFile.write("typedef struct _NODE NODE;\n")
	dijkstraFile.write("\nstruct _UVERTEX{\n")
	dijkstraFile.write("\tint iPID;\n")
	dijkstraFile.write("\tint iNID;\n")
	dijkstraFile.write("\tint iDist;\n")
	dijkstraFile.write("};\n")
	dijkstraFile.write("typedef struct _UVERTEX UVERTEX;\n")
	dijkstraFile.write("\nUVERTEX uVertex[MAXPROCESSORS];\n")
	dijkstraFile.write("NODE rgnNodes[MAXPROCESSORS][NUM_NODES];\n")
	dijkstraFile.write("int g_qCount[MAXPROCESSORS];\n")
	dijkstraFile.write("int paths;\n")
	dijkstraFile.write("int resultSend[33];\n")
	dijkstraFile.write("\nint tasks[MAXPROCESSORS][2];\n")
	dijkstraFile.write("int nodes_tasks[NUM_NODES*(NUM_NODES-1)/2][2];\n")
	dijkstraFile.write("int AdjMatrix[NUM_NODES][NUM_NODES];\n")
	dijkstraFile.write("\nint globalMiniCost[MAXPROCESSORS];\n")
	dijkstraFile.write("int qtdEnvios = 0;\n")
	dijkstraFile.write("\nint qcount (int myID){\n")
	dijkstraFile.write("\treturn(g_qCount[myID]);\n")
	dijkstraFile.write("}\n")
	dijkstraFile.write("\nvoid sendPath(NODE *rgnNodes, int chNode){\n")
	dijkstraFile.write("\tif ((rgnNodes+chNode)->iPrev != NONE){\n")
	dijkstraFile.write("\t\tsendPath(rgnNodes, (rgnNodes+chNode)->iPrev);\n")
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\tresultSend[paths] = chNode+1;\n")
	dijkstraFile.write("\tpaths++;\n")
	dijkstraFile.write("}\n")
	dijkstraFile.write("\nvoid sendResult(int myID,int chStart, int chEnd){\n")
	dijkstraFile.write("\tpaths = 3;\n")
	dijkstraFile.write("\tint k;\n")
	dijkstraFile.write("\tfor(k=0; k<33; k++)\n")
	dijkstraFile.write("\t\tresultSend[k] = 0;\n")
	dijkstraFile.write("\tresultSend[0] = chStart;\n")
	dijkstraFile.write("\tresultSend[1] = chEnd;\n")
	dijkstraFile.write("\tresultSend[2] = rgnNodes[myID][chEnd].iDist;\n")
	dijkstraFile.write("\tsendPath(rgnNodes[myID], chEnd);\n")
	dijkstraFile.write("\n\tMessage msg;\n")
	dijkstraFile.write("\tmsg.length = 33;\n")
	dijkstraFile.write("\tmsg.msg[0] = -1;\n")
	dijkstraFile.write("\tfor(k=0; k<33; k++)\n")
	dijkstraFile.write("\t\tmsg.msg[k] = resultSend[k];\n")
	dijkstraFile.write("\tSend(msg, dividerb);\n")
	dijkstraFile.write("}\n")
	dijkstraFile.write("\nvoid dijkstra(int myID) {\n")
	dijkstraFile.write("\tint x,i,v;\n")
	dijkstraFile.write("\tint chStart, chEnd;\n")
	dijkstraFile.write("\tint u =-1;\n")
	dijkstraFile.write("\n\tfor(x=tasks[myID][0]; x<tasks[myID][1]; x++){\n")
	dijkstraFile.write("\t\tchStart = nodes_tasks[x][0];	//Start node\n")
	dijkstraFile.write("\t\tchEnd = nodes_tasks[x][1];		//End node\n")
	dijkstraFile.write("\t\tu=-1;\n")
	dijkstraFile.write("\n\t\t//Initialize and clear\n")
	dijkstraFile.write("\t\tuVertex[myID].iDist=NONE;\n")
	dijkstraFile.write("\t\tuVertex[myID].iPID=myID;\n")
	dijkstraFile.write("\t\tuVertex[myID].iNID=NONE;\n")
	dijkstraFile.write("\t\tg_qCount[myID] = 0;\n")
	dijkstraFile.write("\t\tu=-1;\n")
	dijkstraFile.write("\t\tfor (v=0; v<NUM_NODES; v++) {\n")
	dijkstraFile.write("\t\t\trgnNodes[myID][v].iDist =  AdjMatrix[chStart][v];\n")
	dijkstraFile.write("\t\t\trgnNodes[myID][v].iPrev = NONE;\n")
	dijkstraFile.write("\t\t\trgnNodes[myID][v].iCatched = 0;\n")
	dijkstraFile.write("\t\t}\n")
	dijkstraFile.write("\t\t//Start working\n")
	dijkstraFile.write("\t\twhile (qcount(myID) < NUM_NODES-1){\n")
	dijkstraFile.write("\t\t\tfor (i=0; i<NUM_NODES; i++) {\n")
	dijkstraFile.write("\t\t\t\tif(rgnNodes[myID][i].iCatched==0 && rgnNodes[myID][i].iDist<uVertex[myID].iDist && rgnNodes[myID][i].iDist!=0){\n")
	dijkstraFile.write("\t\t\t\t\tuVertex[myID].iDist=rgnNodes[myID][i].iDist;\n")
	dijkstraFile.write("\t\t\t\t\tuVertex[myID].iNID=i;\n")
	dijkstraFile.write("\t\t\t\t}\n")
	dijkstraFile.write("\t\t\t}\n")
	dijkstraFile.write("\t\t\tglobalMiniCost[myID]=NONE;\n")
	dijkstraFile.write("\t\t\tif(globalMiniCost[myID]>uVertex[myID].iDist){\n")
	dijkstraFile.write("\t\t\t\tglobalMiniCost[myID] = uVertex[myID].iDist;\n")
	dijkstraFile.write("\t\t\t\tu=uVertex[myID].iNID;\n")
	dijkstraFile.write("\t\t\t\tg_qCount[myID]++;\n")
	dijkstraFile.write("\t\t\t}\n")
	dijkstraFile.write("\t\t\tfor (v=0; v<NUM_NODES; v++) {\n")
	dijkstraFile.write("\t\t\t\tif(v==u){\n")
	dijkstraFile.write("\t\t\t\t\trgnNodes[myID][v].iCatched = 1;\n")
	dijkstraFile.write("\t\t\t\t\tcontinue;\n")
	dijkstraFile.write("\t\t\t\t}\n")
	dijkstraFile.write("\t\t\t\tif((rgnNodes[myID][v].iCatched==0 && rgnNodes[myID][v].iDist>(rgnNodes[myID][u].iDist+AdjMatrix[u][v]))){\n")
	dijkstraFile.write("\t\t\t\t\trgnNodes[myID][v].iDist=rgnNodes[myID][u].iDist+AdjMatrix[u][v];\n")
	dijkstraFile.write("\t\t\t\t\trgnNodes[myID][v].iPrev = u;\n")
	dijkstraFile.write("\t\t\t\t}\n")
	dijkstraFile.write("\t\t\t}\n")
	dijkstraFile.write("\t\t\tuVertex[myID].iDist = NONE;	//Reset\n")
	dijkstraFile.write("\t\t}\n")
	dijkstraFile.write("\n\t\tsendResult(myID,chStart,chEnd);\n")
	dijkstraFile.write("\t\tqtdEnvios++;\n")
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\tMessage msg;\n")
	dijkstraFile.write("\tmsg.length = 33;\n")
	dijkstraFile.write("\tmsg.msg[0] = -1;\n")
	dijkstraFile.write("\tSend(msg, dividerb);\n")
	dijkstraFile.write('\t//MADA ECHO("finaliza\\n");\n')
	dijkstraFile.write("}\n")
	dijkstraFile.write("int main(int argc, char *argv[])\n")
	dijkstraFile.write("{\n")
	dijkstraFile.write('\tMemoryWrite(INITIALIZE_ROUTER, '+str(IdTask+1)+');')
	dijkstraFile.write("\tint i, j;\n")
	dijkstraFile.write("\tMessage msg;\n")
	dijkstraFile.write("\n\n\tmsg.length = NUM_NODES*(NUM_NODES-1)/2;\n")
	dijkstraFile.write("\tmsg = Receive(); //MADAmsg, dividerb);\n")
	dijkstraFile.write("\tfor (i=0; i<(NUM_NODES*(NUM_NODES-1)/2); i++)\n")
	dijkstraFile.write("\t\tnodes_tasks[i][0] = msg.msg[i];\n")
	dijkstraFile.write("\n\tmsg = Receive(); //MADAmsg, dividerb);\n")
	dijkstraFile.write("\tfor (i=0; i<(NUM_NODES*(NUM_NODES-1)/2); i++)\n")
	dijkstraFile.write("\t\tnodes_tasks[i][1] = msg.msg[i];\n")
	dijkstraFile.write("\n\n\tmsg.length = MAXPROCESSORS;\n")
	dijkstraFile.write("\tmsg = Receive(); //MADAmsg, dividerb);\n")
	dijkstraFile.write("\tfor (i=0; i<MAXPROCESSORS; i++) {\n")
	dijkstraFile.write("\t\ttasks[i][0] = msg.msg[i];\n")
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\n\tmsg = Receive(); //MADAmsg, dividerb);\n")
	dijkstraFile.write("\tfor (i=0; i<MAXPROCESSORS; i++) {\n")
	dijkstraFile.write("\t\ttasks[i][1] = msg.msg[i];\n")
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\n\n\tmsg.length = NUM_NODES;\n")
	dijkstraFile.write("\tfor (i=0; i<NUM_NODES; i++) {\n")
	dijkstraFile.write("\t\tmsg = Receive(); //MADAmsg, dividerb);\n")
	dijkstraFile.write("\t\tfor (j=0; j<NUM_NODES; j++)\n")
	dijkstraFile.write("\t\t\tAdjMatrix[j][i] = msg.msg[j];\n")
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\n\tfor(i=0; i<NUM_NODES; i++) {\n")
	dijkstraFile.write('\t\t//MADA ECHO(" D1: ");\n')
	dijkstraFile.write("\t\tfor(j=0; j<NUM_NODES; j++) {\n")
	dijkstraFile.write("\t\t\t//MADA ECHO(itoa(AdjMatrix[i][j]));\n")
	dijkstraFile.write('\t\t\t//MADA ECHO(" ");\n')
	dijkstraFile.write("\t\t}\n")
	dijkstraFile.write('\t\t//MADA ECHO("\\n");\n')
	dijkstraFile.write("\t}\n")
	dijkstraFile.write("\n\tdijkstra(rank);\n")
	dijkstraFile.write("\n\t//MADA ECHO(itoa(GetTick()));\n")
	dijkstraFile.write('\tprintf("Dijkstra_'+str(IdTask)+'b finished.");\n')
	dijkstraFile.write('\tMemoryWrite(END_SIM, '+str(IdTask+1)+');')
	dijkstraFile.write("\n\treturn 0;\n")
	dijkstraFile.write("}\n")

try:
	num_tasks = int(sys.argv[1])
	dividerFile = open("dividerb.c", "w")
	createDivider();
	dividerFile.close()

	for IdTask in range(num_tasks-1):
		dijkstraFile = open("dijkstra_"+str(IdTask)+"b.c", "w")
		createDijkstra();
		dijkstraFile.close()

except Exception, e:
	print "\n####################\n\tExecute: \n\t$ gen_dijkstra.py <NUMBER_OF_TASKS>\n####################\n"
	raise
else:
	print "\n\t### Generation successful ###\n"
	pass
finally:
	pass