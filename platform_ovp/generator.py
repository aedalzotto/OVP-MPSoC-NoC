#!/usr/bin/env python2

######################################
# author G.Madalozzo
# date 25 Sep 2014 9:13:43 PM
#
# Bare Metal OVP MPSoC Generation
######################################

import sys
import fileinput
import os
import subprocess
from subprocess import call

def generate():
	genFile.write("#include <stdio.h>")
	genFile.write("\n#include <stdlib.h>")
	genFile.write("\n#include <string.h>")
	genFile.write("\n#include \"icm/icmCpuManager.hpp\"")
	genFile.write("\n#include <sys/time.h>")
	genFile.write("\n#include \"defines.h\"")
	genFile.write("\n")
	genFile.write("\n#define N_PE 		"+str(noc_x*noc_y))
	genFile.write("\n#define N_PE_X 	"+str(noc_x))
	genFile.write("\n#define N_PE_Y 	"+str(noc_y))
	genFile.write("\n")
	genFile.write("\n#define SIM_ATTRS (ICM_ATTR_DEFAULT)")
	genFile.write("\n")
	genFile.write("\nicmProcessorP processors[N_PE];")
	genFile.write("\nicmBusP bus[N_PE];")
	genFile.write("\nicmMemoryP mem[N_PE];")
	genFile.write("\nint dma_size[N_PE];")
	genFile.write("\nint dma_address[N_PE];")
	genFile.write("\nint dma_op[N_PE];")
	genFile.write("\nint dma_start[N_PE];")
	genFile.write("\nint header_dma_size[N_PE];")
	genFile.write("\nint data_in[N_PE];")
	genFile.write("\nint first_read[N_PE];")
	genFile.write("\nint page[N_PE];")
	genFile.write("\nint irq_mask[N_PE];")
	genFile.write("\nint irq_status[N_PE];")
	genFile.write("\nint counter_reg[N_PE];")
	genFile.write("\nint repo_write[N_PE];")
	genFile.write("\nint next_page[N_PE];")
	genFile.write("\nint first_address[N_PE];")
	genFile.write("\nint packets_in[N_PE];")
	genFile.write("\nint packets_out[N_PE];")
	genFile.write("\nint cpu_halt[N_PE];")
	genFile.write("\nicmPseP pse[N_PE];")
	genFile.write("\nicmPseP dynamicApps;")
	genFile.write("\nicmNetP router_address[N_PE];")
	genFile.write("\nicmNetP end_sim[N_PE];")
	genFile.write("\nicmNetP read_data[N_PE][NPORT];")
	genFile.write("\nicmNetP data_read[N_PE][NPORT];")
	genFile.write("\nicmNetP send_data[N_PE][NPORT];")
	genFile.write("\nicmNetP data_write[N_PE][NPORT];")
	genFile.write("\nicmNetP ni_intr[N_PE];")
	genFile.write("\nicmNetP timeslice_intr[N_PE];")
	genFile.write("\nicmNetP n_req_app;")
	genFile.write("\nicmNetP n_ack_app;")
	genFile.write("\nicmNetP n_app_size;")
	genFile.write("\nicmNetP n_finished_tasks;")
	genFile.write("\nint timeslice[N_PE];")
	genFile.write("\nint wait_scheduler[N_PE];")
	genFile.write("\nint scheduler[N_PE];")
	genFile.write("\nint ni_i[N_PE];")
	genFile.write("\nint timeslice_i[N_PE];")
	genFile.write("\nint req_app;")
	genFile.write("\nint ack_app;")
	genFile.write("\nint app_size;")
	genFile.write("\nfloat totalEnergy;")
	genFile.write("\nint totalVolume;")
	genFile.write("\nint volume[N_PE];")
	genFile.write("\nfloat energy[N_PE];")
	genFile.write("\nint router_cycles[N_PE];")
	genFile.write("\nint swap_read[N_PE];")
	genFile.write("\nint init_counter;")
	genFile.write("\nint mapped_tasks = 0;")
	genFile.write("\nint finished_tasks = 0;")

	genFile.write("\n")
	genFile.write("\nstruct timeval stop, start;")
	genFile.write("\ndouble max_instructions = 0;")
	genFile.write("\ndouble totalSimulated;")
	genFile.write("\ndouble elapsed;")
	genFile.write("\ndouble mips;")
	genFile.write("\n")
	genFile.write("\n//function that converts big endian/little endian or little endian/big endian")
	genFile.write("\nUns32 swap_Uns32(Uns32 val)")
	genFile.write("\n{")
	genFile.write("\n    val = ((val << 8) & 0xFF00FF00 ) | ((val >> 8) & 0xFF00FF );")
	genFile.write("\n    return (val << 16) | (val >> 16);")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nchar nameString[64]; // temporary string to create labels")
	genFile.write("\n")
	genFile.write("\nstruct node {")
	genFile.write("\n  int x;")
	genFile.write("\n  struct node *next;")
	genFile.write("\n};")
	genFile.write("\n")
	genFile.write("\nstruct node *buff[N_PE];")
	genFile.write("\nstruct node *first[N_PE];")
	genFile.write("\nstruct node *clean[N_PE];")
	genFile.write("\nint size[N_PE];")
	genFile.write("\nint size_packet[N_PE];")
	genFile.write("\nint counter_packet[N_PE];")
	genFile.write("\nint counter[N_PE];")
	genFile.write("\nint counter_send[N_PE];")
	genFile.write("\nint size_send[N_PE];")
	genFile.write("\nint xo[N_PE];")
	genFile.write("\nint yo[N_PE];")
	genFile.write("\nint xd[N_PE];")
	genFile.write("\nint yd[N_PE];")
	genFile.write("\nint hops[N_PE];")
	genFile.write("\nint total_hops;")
	genFile.write("\n")


	genFile.write("\n\n/** Functions - Trace**/")
	genFile.write("\n/** ------------------------------------------------------------------------------------- **/")
	genFile.write("\nint NormalAddress(int normal)")
	genFile.write("\n{")
	genFile.write("\n	int n_address, pos_x, pos_y;")

	genFile.write("\n	pos_x = normal >> 8;")
	genFile.write("\n	pos_y = normal & 0xFF;")

	genFile.write("\n	if(N_PE_X <= N_PE_Y)")
	genFile.write("\n	{")
	genFile.write("\n		n_address = (N_PE_Y * pos_y) + pos_x;")
	genFile.write("\n	}")
	genFile.write("\n	else")
	genFile.write("\n	{")
	genFile.write("\n		n_address = (N_PE_X * pos_y) + pos_x;")
	genFile.write("\n	}")

	genFile.write("\n	return n_address;")
	genFile.write("\n}")



	genFile.write("\n\nNET_WRITE_FN(req_app_update)")
	genFile.write("\n{")
	genFile.write("\n	req_app = value;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nNET_WRITE_FN(app_size_update)")
	genFile.write("\n{")
	genFile.write("\n	app_size = value;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nvoid bufferReceive(int p, int value)")
	genFile.write("\n{")
	genFile.write("\n     //   if(packets_in[p]!=packets_out[p])")
	genFile.write("\n		   // register_unfreeze(p, 0);")
	genFile.write("\n		counter[p]++;")
	genFile.write("\n		if(first[p] == NULL)")
	genFile.write("\n		{")
	genFile.write("\n			first[p] = malloc( sizeof(struct node) );")
	genFile.write("\n			first[p]->x = value;")
	genFile.write("\n			first[p]->next = NULL;")
	genFile.write("\n			buff[p] = first[p];")
	genFile.write("\n		}")
	genFile.write("\n		else")
	genFile.write("\n		{")
	genFile.write("\n			buff[p]->next = malloc( sizeof(struct node) );")
	genFile.write("\n			buff[p] = buff[p]->next;")
	genFile.write("\n			buff[p]->x = value;")
	genFile.write("\n			buff[p]->next = NULL;")
	genFile.write("\n		}")
	genFile.write("\n		if(counter[p]==2)")
	genFile.write("\n		{")
	genFile.write("\n			size[p] = value;")
	genFile.write("\n		}")
	genFile.write("\n		if(counter[p]>2)")
	genFile.write("\n		{")
	genFile.write("\n			size[p]--;")
	genFile.write("\n			if(size[p]==0)")
	genFile.write("\n			{")
	genFile.write("\n				counter[p] = 0;")
	genFile.write("\n				packets_in[p]++;")
	genFile.write("\n     //   if(packets_in[p]!=packets_out[p])")
	genFile.write("\n		   // register_unfreeze(p, 1);")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nNET_WRITE_FN(Receive)")
	genFile.write("\n{")
	genFile.write("\n	int processorNumber = (int) userData;")
	genFile.write("\n	bufferReceive(processorNumber, value);")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n")
	genFile.write("\nint RouterPosition(int router)")
	genFile.write("\n{")
	genFile.write("\n	int pos;")
	genFile.write("\n")
	genFile.write("\n	int column = router%N_PE_X;")
	genFile.write("\n")
	genFile.write("\n	if(router>=(N_PE-N_PE_X)){ //TOP")
	genFile.write("\n		if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n			pos = TR;")
	genFile.write("\n		}")
	genFile.write("\n		else{")
	genFile.write("\n			if(column==0){//LEFT")
	genFile.write("\n				pos = TL;")
	genFile.write("\n			}")
	genFile.write("\n			else{//CENTER_X")
	genFile.write("\n				pos = TC;")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n	else{")
	genFile.write("\n		if(router<N_PE_X){ //BOTTOM")
	genFile.write("\n			if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n				pos = BR;")
	genFile.write("\n			}")
	genFile.write("\n			else{")
	genFile.write("\n				if(column==0){//LEFT")
	genFile.write("\n					pos = BL;")
	genFile.write("\n				}")
	genFile.write("\n				else{//CENTER_X")
	genFile.write("\n					pos = BC;")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n		else{//CENTER_Y")
	genFile.write("\n			if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n				pos = CRX;")
	genFile.write("\n			}")
	genFile.write("\n			else{")
	genFile.write("\n				if(column==0){//LEFT")
	genFile.write("\n					pos = CL;")
	genFile.write("\n				}")
	genFile.write("\n				else{//CENTER_X")
	genFile.write("\n					pos = CC;")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n")
	genFile.write("\n	return pos;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nint RouterPorts(int router)")
	genFile.write("\n{")
	genFile.write("\n	int ports;")
	genFile.write("\n")
	genFile.write("\n	int column = router%N_PE_X;")
	genFile.write("\n")
	genFile.write("\n	if(router>=(N_PE-N_PE_X)){ //TOP")
	genFile.write("\n		if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n			ports = 3;")
	genFile.write("\n		}")
	genFile.write("\n		else{")
	genFile.write("\n			if(column==0){//LEFT")
	genFile.write("\n				ports = 3;")
	genFile.write("\n			}")
	genFile.write("\n			else{//CENTER_X")
	genFile.write("\n				ports = 4;")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n	else{")
	genFile.write("\n		if(router<N_PE_X){ //BOTTOM")
	genFile.write("\n			if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n				ports = 3;")
	genFile.write("\n			}")
	genFile.write("\n			else{")
	genFile.write("\n				if(column==0){//LEFT")
	genFile.write("\n					ports = 3;")
	genFile.write("\n				}")
	genFile.write("\n				else{//CENTER_X")
	genFile.write("\n					ports = 4;")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n		else{//CENTER_Y")
	genFile.write("\n			if(column==(N_PE_X-1)){ //RIGHT")
	genFile.write("\n				ports = 4;")
	genFile.write("\n			}")
	genFile.write("\n			else{")
	genFile.write("\n				if(column==0){//LEFT")
	genFile.write("\n					ports = 4;")
	genFile.write("\n				}")
	genFile.write("\n				else{//CENTER_X")
	genFile.write("\n					ports = 5;")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n")
	genFile.write("\n	return ports;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nint RouterAddress(int router)")
	genFile.write("\n{")
	genFile.write("\n	int r_address, pos_x, pos_y;")
	genFile.write("\n")
	genFile.write("\n	if(N_PE_X <= N_PE_Y)")
	genFile.write("\n	{")
	genFile.write("\n		pos_x = (router%N_PE_Y) << 8;")
	genFile.write("\n		pos_y = router/N_PE_Y;")
	genFile.write("\n	}")
	genFile.write("\n	else")
	genFile.write("\n	{")
	genFile.write("\n		pos_x = (router%N_PE_X) << 8;")
	genFile.write("\n		pos_y = router/N_PE_X;")
	genFile.write("\n	}")
	genFile.write("\n")
	genFile.write("\n	r_address = pos_x | pos_y;")
	genFile.write("\n	return r_address;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nvoid update_volume(int xi, int yi, int xf, int yf, int vol)")
	genFile.write("\n{")
	genFile.write("\n	int xx = xi;")
	genFile.write("\n	int yy = yi;")
	genFile.write("\n	while(1)")
	genFile.write("\n	{")
	genFile.write("\n		if(xf>xi)")
	genFile.write("\n		{")
	genFile.write("\n			xx++;")
	genFile.write("\n		}")
	genFile.write("\n		if(xf<xi)")
	genFile.write("\n		{")
	genFile.write("\n			xx--;")
	genFile.write("\n		}")
	genFile.write("\n		if(xf==xi)")
	genFile.write("\n		{")
	genFile.write("\n			if(yf>yi)")
	genFile.write("\n			{")
	genFile.write("\n				yy++;")
	genFile.write("\n			}")
	genFile.write("\n			if(yf<yi)")
	genFile.write("\n			{")
	genFile.write("\n				yy--;")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n				xi = xx;")
	genFile.write("\n				yi = yy;")
	genFile.write("\n				volume[NormalAddress(xi*256+yi)] = volume[NormalAddress(xi*256+yi)] + vol;")
	genFile.write("\n				router_cycles[NormalAddress(xi*256+yi)] = router_cycles[NormalAddress(xi*256+yi)] + vol+3;")
	genFile.write("\n				energy[NormalAddress(xi*256+yi)] = energy[NormalAddress(xi*256+yi)] + (vol*0.0035104);")
	genFile.write("\n				if((xi==xf) && (yi==yf)) break;")

	genFile.write("\n	}")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nvoid dmaProcess(int p)")
	genFile.write("\n{")
	genFile.write("\n	int data[N_PE], verify_data[N_PE];")
	genFile.write("\n	while(dma_size[p])")
	genFile.write("\n	{")
	genFile.write("\n		if(dma_op[p] == READ)")
	genFile.write("\n		{")
	genFile.write("\n			if(repo_write[p]==0)")
	genFile.write("\n			{")
	genFile.write("\n				icmReadProcessorMemory(processors[p], dma_address[p], &data[p], 4);")
	genFile.write("\n				dma_address[p] = dma_address[p] + 4;")
	genFile.write("\n				counter_send[p]++;")
	genFile.write("\n				if(counter_send[p]==1)")
	genFile.write("\n				{")
	genFile.write("\n					xd[p] = swap_Uns32(data[p]) >> 8;")
	genFile.write("\n					yd[p] = swap_Uns32(data[p]) & 0xFF;")
	genFile.write("\n")
	genFile.write("\n					xo[p] = RouterAddress(p) >> 8;")
	genFile.write("\n					yo[p] = RouterAddress(p) & 0xFF;")
	genFile.write("\n")
	genFile.write("\n					hops[p] = (abs(xd[p]-xo[p])+abs(yd[p]-yo[p]));")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_send[p]==2)")
	genFile.write("\n				{")
	genFile.write("\n					size_send[p] = swap_Uns32(data[p]);")
	genFile.write("\n					totalVolume = totalVolume + size_send[p] + 2;")
	genFile.write("\n					totalEnergy = totalEnergy + hops[p]*(size_send[p] + 2)*0.0035104;")
	genFile.write("\n					volume[p] = volume[p] + size_send[p] + 2;")
	genFile.write("\n					energy[p] = energy[p] + (size_send[p] + 2)*0.0035104;")
	genFile.write("\n					router_cycles[p] = router_cycles[p] + (size_send[p] + 5);")
	genFile.write("\n					total_hops = total_hops + hops[p];")
	genFile.write("\n					update_volume(xo[p], yo[p], xd[p], yd[p], size_send[p]+2);")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_send[p]==3 && swap_Uns32(data[p])==0x00000040)")
	genFile.write("\n				{")
	genFile.write("\n					mapped_tasks++;")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_send[p]==3 && swap_Uns32(data[p])==0x00000070)")
	genFile.write("\n				{")
	genFile.write("\n					mapped_tasks--;")
	genFile.write("\n					finished_tasks++;")
	genFile.write("\n					icmWriteNet(n_finished_tasks, finished_tasks);")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_send[p]>2)")
	genFile.write("\n				{")
	genFile.write("\n					size_send[p]--;")
	genFile.write("\n					if(size_send[p]==0)")
	genFile.write("\n					{")
	genFile.write("\n						counter_send[p] = 0;")
	genFile.write("\n					}")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				//data[p] = repository[dma_address[p]];")
	genFile.write("\n				dma_address[p] = dma_address[p] + 1;")
	genFile.write("\n				counter_send[p]++;")
	genFile.write("\n				if(counter_send[p]==2)")
	genFile.write("\n				{")
	genFile.write("\n					size_send[p] = swap_Uns32(data[p]);")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_send[p]>2)")
	genFile.write("\n				{")
	genFile.write("\n					size_send[p]--;")
	genFile.write("\n					if(size_send[p]==0)")
	genFile.write("\n					{")
	genFile.write("\n						counter_send[p] = 0;")
	genFile.write("\n					}")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n			icmWriteNet(data_read[p][LOCAL], swap_Uns32(data[p]));")
	genFile.write("\n			dma_size[p]--;")
	genFile.write("\n		}")
	genFile.write("\n		else")
	genFile.write("\n		{")
	genFile.write("\n			if(first[p] != NULL)")
	genFile.write("\n			{")
	genFile.write("\n				if(first_read[p] == 1)")
	genFile.write("\n				{")
	genFile.write("\n					free(clean[p]);")
	genFile.write("\n				}")
	genFile.write("\n				else")
	genFile.write("\n				{")
	genFile.write("\n					first_read[p] = 1;")
	genFile.write("\n				}")
	genFile.write("\n				data[p] = first[p]->x;")
	genFile.write("\n				if(page[p]!=0)")
	genFile.write("\n				{")
	genFile.write("\n					if(dma_address[p]==first_address[p])")
	genFile.write("\n					{")
	genFile.write("\n						data[p] = 0X3c1d0000 | (page[p]>>16);")
	genFile.write("\n						data[p] = swap_Uns32(data[p]);")
	genFile.write("\n					}")
	genFile.write("\n					if(dma_address[p]==(first_address[p]+4))")
	genFile.write("\n					{")
	genFile.write("\n						data[p] = 0X37bd0000 | ((page[p] & 0xFFFF)+0x4000);")
	genFile.write("\n						data[p] = swap_Uns32(data[p]);")
	genFile.write("\n					}")
	genFile.write("\n					if(dma_address[p]>(first_address[p]+4))")
	genFile.write("\n					{")
	genFile.write("\n						verify_data[p] = swap_Uns32(data[p]) >> 26;")
	genFile.write("\n						if(verify_data[p] == 3 || verify_data[p] == 2)")
	genFile.write("\n						{")
	genFile.write("\n							data[p] = swap_Uns32(data[p]);")
	genFile.write("\n							data[p] = data[p] | (page[p]>>2);")
	genFile.write("\n							data[p] = swap_Uns32(data[p]);")
	genFile.write("\n						}")
	genFile.write("\n					}")
	genFile.write("\n				}")
	genFile.write("\n				else data[p] = swap_Uns32(data[p]);")
	genFile.write("\n				icmWriteProcessorMemory(processors[p], dma_address[p], &data[p], 4);")
	genFile.write("\n				counter_packet[p]++;")
	genFile.write("\n				if(counter_packet[p] == 2)")
	genFile.write("\n				{")
	genFile.write("\n					size_packet[p] = data[p];")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_packet[p] > 2)")
	genFile.write("\n				{")
	genFile.write("\n					size_packet[p]--;")
	genFile.write("\n					if(size_packet[p] == 0)")
	genFile.write("\n					{")
	genFile.write("\n						counter_packet[p]=0;")
	genFile.write("\n						packets_out[p]++;")
	genFile.write("\n					}")
	genFile.write("\n				}")
	genFile.write("\n				dma_address[p] = dma_address[p] + 4;")
	genFile.write("\n				dma_size[p]--;")
	genFile.write("\n				clean[p] = first[p];")
	genFile.write("\n				first[p] = first[p]->next;")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				first_read[p] = 0;")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n	if(dma_size[p] == 0) dma_start[p] = 0;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n//function acessed when a register is read from memory")
	genFile.write("\nint register_bank_read(int address, int p)")
	genFile.write("\n{")
	genFile.write("\n	int return_data;")
	genFile.write("\n")
	genFile.write("\n	switch(address)")
	genFile.write("\n	{")
	genFile.write("\n		case DMA_READY:")
	genFile.write("\n			if(dma_start[p] == 1)")
	genFile.write("\n			{")
	genFile.write("\n				return_data = dma_size[p];")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				return_data = 0;")
	genFile.write("\n			}")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case PROC_ADDRESS:")
	genFile.write("\n			return_data = swap_Uns32(RouterAddress(p));")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case START_SYSTEM:")
	genFile.write("\n			if(init_counter!=N_PE)")
	genFile.write("\n			{")
	genFile.write("\n				return_data = 1;")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				return_data = 0;")
	genFile.write("\n			}")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case READ_NI_READY:")
	genFile.write("\n			if(first[p] != NULL)")
	genFile.write("\n			{")
	genFile.write("\n				if(first_read[p] == 1)")
	genFile.write("\n				{")
	genFile.write("\n					free(clean[p]);")
	genFile.write("\n				}")
	genFile.write("\n				else")
	genFile.write("\n				{")
	genFile.write("\n					first_read[p] = 1;")
	genFile.write("\n				}")
	genFile.write("\n				data_in[p] = swap_Uns32(first[p]->x);")
	genFile.write("\n				counter_packet[p]++;")
	genFile.write("\n				if(counter_packet[p] == 2)")
	genFile.write("\n				{")
	genFile.write("\n					size_packet[p] = first[p]->x;")
	genFile.write("\n				}")
	genFile.write("\n				if(counter_packet[p] > 2)")
	genFile.write("\n				{")
	genFile.write("\n					size_packet[p]--;")
	genFile.write("\n					if(size_packet[p] == 0)")
	genFile.write("\n					{")
	genFile.write("\n						counter_packet[p]=0;")
	genFile.write("\n						packets_out[p]++;")
	genFile.write("\n					}")
	genFile.write("\n				}")
	genFile.write("\n				header_dma_size[p]--;")
	genFile.write("\n				clean[p] = first[p];")
	genFile.write("\n				first[p] = first[p]->next;")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				first_read[p] = 0;")
	genFile.write("\n			}")
	genFile.write("\n			return_data = header_dma_size[p];")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case DATA_IN:")
	genFile.write("\n			if(swap_read[p]==0)")
	genFile.write("\n			{")
	genFile.write("\n				return_data = data_in[p];")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n")
	genFile.write("\n				return_data = swap_Uns32(data_in[p]);")
	genFile.write("\n			}")
	genFile.write("\n")
	genFile.write("\n")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case IRQ_STATUS:")
	genFile.write("\n			if(ni_i[p]==1 && timeslice_i[p]==1)")
	genFile.write("\n			{")
	genFile.write("\n				return swap_Uns32(IRQ_NOC|IRQ_COUNTER18);")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				if(ni_i[p]==1) return swap_Uns32(IRQ_NOC);")
	genFile.write("\n				if(timeslice_i[p] ==1) return swap_Uns32(IRQ_COUNTER18);")
	genFile.write("\n			}")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case REQ_APP:")
	genFile.write("\n			return_data = swap_Uns32(req_app);")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case APP_SIZE:")
	genFile.write("\n			return_data = swap_Uns32(app_size);")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		default: break;")
	genFile.write("\n	}")
	genFile.write("\n	return return_data;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n//function acessed when a register is written in memory")
	genFile.write("\nvoid register_bank_write(int address, int value, int p)")
	genFile.write("\n{")
	genFile.write("\n	int x, y;")
	genFile.write("\n	switch(address)")
	genFile.write("\n	{")
	genFile.write("\n		case DMA_SIZE:")
	genFile.write("\n			dma_size[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case DMA_ADDRESS:")
	genFile.write("\n			dma_address[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case DMA_OP:")
	genFile.write("\n			dma_op[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case DMA_START:")
	genFile.write("\n			first_address[p] = dma_address[p];")
	genFile.write("\n			dma_start[p] = 1;")
	genFile.write("\n			dmaProcess(p);")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case START_READ_NI:")
	genFile.write("\n			//printf(\"START_READ_NI\\n\");")
	genFile.write("\n			header_dma_size[p] = 1;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case WRITE_NI:")
	genFile.write("\n			icmWriteNet(data_read[p][LOCAL], value);")
	genFile.write("\n			counter_send[p]++;")
	genFile.write("\n			if(counter_send[p]==1)")
	genFile.write("\n			{")
	genFile.write("\n				xd[p] = value >> 8;")
	genFile.write("\n				yd[p] = value & 0xFF;")
	genFile.write("\n")
	genFile.write("\n				xo[p] = RouterAddress(p) >> 8;")
	genFile.write("\n				yo[p] = RouterAddress(p) & 0xFF;")
	genFile.write("\n")
	genFile.write("\n				hops[p] = (abs(xd[p]-xo[p])+abs(yd[p]-yo[p]));")
	genFile.write("\n			}")
	genFile.write("\n			if(counter_send[p]==2)")
	genFile.write("\n			{")
	genFile.write("\n				size_send[p] = value;")
	genFile.write("\n				totalVolume = totalVolume + size_send[p] + 2;")
	genFile.write("\n				totalEnergy = totalEnergy + hops[p]*(size_send[p] + 2)*0.0035104;")
	genFile.write("\n				volume[p] = volume[p] + size_send[p] + 2;")
	genFile.write("\n				energy[p] = energy[p] + (size_send[p] + 2)*0.0035104;")
	genFile.write("\n				router_cycles[p] = router_cycles[p] + (size_send[p] + 5);")
	genFile.write("\n				total_hops = total_hops + hops[p];")
	genFile.write("\n				update_volume(xo[p], yo[p], xd[p], yd[p], size_send[p]+2);")
	genFile.write("\n			}")
	genFile.write("\n			if(counter_send[p]>2)")
	genFile.write("\n			{")
	genFile.write("\n				size_send[p]--;")
	genFile.write("\n				if(size_send[p]==0)")
	genFile.write("\n				{")
	genFile.write("\n					counter_send[p] = 0;")
	genFile.write("\n				}")
	genFile.write("\n			}")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case PAGE:")
	genFile.write("\n			page[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case IRQ_MASK:")
	genFile.write("\n			irq_mask[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case COUNTER_REG:")
	genFile.write("\n			counter_reg[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case REPOSITORY:")
	genFile.write("\n			repo_write[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case SWAP_READ:")
	genFile.write("\n			swap_read[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case NEXT_PAGE:")
	genFile.write("\n			counter_reg[p] = 0;")
	genFile.write("\n			next_page[p] = value;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case SCHEDULER_CALLED:")
	genFile.write("\n			scheduler[p] = 1;")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case ACK_APP:")
	genFile.write("\n			icmWriteNet(n_ack_app, value);")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case INITIALIZE_ROUTER:")
	genFile.write("\n			icmWriteNet(router_address[value], RouterAddress(value));")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n		case END_SIM:")
	genFile.write("\n			printf(\"Total communication volume: f(%d)\", value);")
	genFile.write("\n			for(y=(N_PE_Y-1); y>-1; y--)")
	genFile.write("\n			{")
	genFile.write("\n				printf(\"\\n\");")
	genFile.write("\n				for(x=0; x<N_PE_X; x++) printf(\"%d\t\", volume[NormalAddress(x*256+y)]);")
	genFile.write("\n			};")
	genFile.write("\n			printf(\"\\n\");")
	#genFile.write("\n			icmInterrupt();")
	genFile.write("\n		break;")
	genFile.write("\n")
	genFile.write("\n	default: break;")
	genFile.write("\n	}")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nICM_MEM_WATCH_FN(sendRegData)")
	genFile.write("\n{")
	genFile.write("\n	int p = atoi(icmGetProcessorName(processor, \"\\n\"));")
	genFile.write("\n	if(packets_in[p]!=packets_out[p])")
	genFile.write("\n	{")
	genFile.write("\n		ni_i[p] = 1;")
	genFile.write("\n		icmWriteNet(ni_intr[p], 1);")
	genFile.write("\n	}")
	genFile.write("\n	else")
	genFile.write("\n	{")
	genFile.write("\n		ni_i[p] = 0;")
	genFile.write("\n		icmWriteNet(ni_intr[p], 0);")
	genFile.write("\n	}")
	genFile.write("\n")
	genFile.write("\n	if(next_page[p] != 0)// && kernel_type[p]==0)")
	genFile.write("\n	{")
	genFile.write("\n		if(wait_scheduler[p]==1)")
	genFile.write("\n		{")
	genFile.write("\n			if(scheduler[p]==1)")
	genFile.write("\n			{")
	genFile.write("\n				scheduler[p]=0;")
	genFile.write("\n				wait_scheduler[p]=0;")
	genFile.write("\n				timeslice_i[p] = 0;")
	genFile.write("\n				icmWriteNet(timeslice_intr[p], 0);")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				timeslice_i[p] = 1;")
	genFile.write("\n				icmWriteNet(timeslice_intr[p], 1);")
	genFile.write("\n			}")
	genFile.write("\n")
	genFile.write("\n		}")
	genFile.write("\n		else")
	genFile.write("\n		{")
	genFile.write("\n			if(timeslice[p]>=16384)")
	genFile.write("\n			{")
	genFile.write("\n				wait_scheduler[p] = 1;")
	genFile.write("\n				timeslice[p] = 0;")
	genFile.write("\n			}")
	genFile.write("\n			else")
	genFile.write("\n			{")
	genFile.write("\n				timeslice[p]++;")
	genFile.write("\n			}")
	genFile.write("\n		}")
	genFile.write("\n	}")
	genFile.write("\n	else")
	genFile.write("\n	{")
	genFile.write("\n		timeslice[p] = 0;")
	genFile.write("\n	}")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n//register bank callback functions")
	genFile.write("\nICM_MEM_READ_FN(regbank_rb)")
	genFile.write("\n{")
	genFile.write("\n	int p = atoi(icmGetProcessorName(processor, \"\\n\"));")
	genFile.write("\n	int data = register_bank_read(address, p);")
	genFile.write("\n	*(Int32 *)value = data;")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nICM_MEM_WRITE_FN(regbank_wb)")
	genFile.write("\n{")
	genFile.write("\n	int p = atoi(icmGetProcessorName(processor, \"\\n\"));")
	genFile.write("\n	register_bank_write(address, swap_Uns32(*(Uns32*)value), p);")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n//pagination callback functions")
	genFile.write("\nICM_MEM_READ_FN(mem_rb)")
	genFile.write("\n{")
	genFile.write("\n	int new_address, data;")
	genFile.write("\n	int p = atoi(icmGetProcessorName(processor, \"\\n\"));")
	genFile.write("\n")
	genFile.write("\n	if(next_page[p]!=0)")
	genFile.write("\n	{")
	genFile.write("\n		new_address = (Int32)address | next_page[p];")
	genFile.write("\n		icmReadProcessorMemory(processor, new_address, &data, 4);")
	genFile.write("\n		*(Int32 *)value = data;")
	genFile.write("\n	}")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\nICM_MEM_WRITE_FN(mem_wb)")
	genFile.write("\n{")
	genFile.write("\n	int new_address;")
	genFile.write("\n	int p = atoi(icmGetProcessorName(processor, \"\\n\"));")
	genFile.write("\n")
	genFile.write("\n	new_address = (Int32)address | next_page[p];")
	genFile.write("\n	icmWriteProcessorMemory(processor, new_address, value, 4);")
	genFile.write("\n}")
	genFile.write("\n")
	genFile.write("\n//")
	genFile.write("\n// Main routine")
	genFile.write("\n//")
	genFile.write("\nint main(int argc, char **argv) {")
	genFile.write("\n")
	genFile.write("\n	gettimeofday(&start, NULL);//----------------------------------------------")
	genFile.write("\n")
	genFile.write("\n    // initialize OVPsim, enabling verbose mode to get statistics at end")
	genFile.write("\n    // of execution")
	genFile.write("\n    icmInit(ICM_VERBOSE|ICM_STOP_ON_CTRLC, 0, 0);")
	genFile.write("\n")
	genFile.write("\n    const char *model      = icmGetVlnvString(NULL, \"mips.ovpworld.org\", \"processor\", \"mips32_r1r5\", \"1.0\", \"model\");")
	genFile.write("\n	const char *semihosting = icmGetVlnvString(NULL, \"mips.ovpworld.org\", \"semihosting\", \"mips32Newlib\", \"1.0\", \"model\");")
	genFile.write("\n")
	genFile.write("\n	//create a user attribute object")
	genFile.write("\n	icmAttrListP userAttrs = icmNewAttrList();")
	genFile.write("\n	//add a double attribute to set mips to 1000")
	genFile.write("\n	icmAddDoubleAttr(userAttrs, \"mips\", 1000.0);")
	genFile.write("\n    // Create the processor instances")
	genFile.write("\n    int stepIndex;")
	genFile.write("\n    for (stepIndex=0; stepIndex < N_PE; stepIndex++)")
	genFile.write("\n	 {")
	genFile.write("\n		sprintf(nameString, \"%d\", stepIndex);")
	genFile.write("\n        processors[stepIndex] = icmNewProcessor(")
	genFile.write("\n            nameString,            // CPU name")
	genFile.write("\n            \"mips32_r1r5\",           // CPU type")
	genFile.write("\n            stepIndex,          // CPU cpuId")
	genFile.write("\n            0,                  // CPU model flags")
	genFile.write("\n            32,                 // address bits")
	genFile.write("\n            model,        // model file")
	genFile.write("\n            \"modelAttrs\",       // morpher attributes")
	genFile.write("\n            SIM_ATTRS,          // attributes")
	genFile.write("\n            0,          // user-defined attributes")
	genFile.write("\n            semihosting,     // semi-hosting file")
	genFile.write("\n            \"modelAttrs\"        // semi-hosting attributes")
	genFile.write("\n        );")
	genFile.write("\n")
	genFile.write("\n")
	genFile.write("\n")
	genFile.write("\n        // create the processor bus")
	genFile.write("\n        sprintf(nameString, \"BUS-%d\", stepIndex);")
	genFile.write("\n        bus[stepIndex] = icmNewBus(nameString, 32);")
	genFile.write("\n")
	genFile.write("\n        // connect the processors onto the busses")
	genFile.write("\n        icmConnectProcessorBusses(processors[stepIndex], bus[stepIndex], bus[stepIndex]);")
	genFile.write("\n")
	genFile.write("\n        // create memory")
	genFile.write("\n        sprintf(nameString, \"MEM-%d\", stepIndex);")
	genFile.write("\n        mem[stepIndex] = icmNewMemory(nameString, ICM_PRIV_RWX, 0xefffffff);")
	genFile.write("\n")
	genFile.write("\n        // connect the memory onto the busses")
	genFile.write("\n        icmConnectMemoryToBus(bus[stepIndex], \"mp1\", mem[stepIndex], 0x00000000);")
	genFile.write("\n        sprintf(nameString, \"extMemReg-%d\", stepIndex);")
	genFile.write("\n        icmMapExternalMemory(bus[stepIndex], nameString, ICM_PRIV_RW, 0xf0000000, 0xffffffff, regbank_rb, regbank_wb, 0);")
	genFile.write("\n")
	genFile.write("\n        sprintf(nameString, \"router-%d\", stepIndex);")
	genFile.write("\n        pse[stepIndex] = icmNewPSE(nameString, \""+projPath+"/platform_ovp/router/pse.pse\", NULL, NULL, NULL);")
	genFile.write("\n")
	genFile.write("\n        sprintf(nameString, \"router_address-%d\", stepIndex);")
	genFile.write("\n		router_address[stepIndex] = icmNewNet(nameString);")
	genFile.write("\n		icmConnectPSENet(pse[stepIndex], router_address[stepIndex], \"router_address\", ICM_INPUT);")
	genFile.write("\n")
	genFile.write("\n        sprintf(nameString, \"end_sim-%d\", stepIndex);")
	genFile.write("\n		end_sim[stepIndex] = icmNewNet(nameString);")
	genFile.write("\n		icmConnectPSENet(pse[stepIndex], end_sim[stepIndex], \"end_sim\", ICM_INPUT);")
	genFile.write("\n")
	genFile.write("\n        sprintf(nameString, \"read_data-%d-local\", stepIndex);")
	genFile.write("\n		read_data[stepIndex][LOCAL] = icmNewNet(nameString);")
	genFile.write("\n		icmConnectPSENet(pse[stepIndex], read_data[stepIndex][LOCAL], \"read_data_4\", ICM_INPUT);")
	genFile.write("\n")
	genFile.write("\n		sprintf(nameString, \"data_read-%d-local\", stepIndex);")
	genFile.write("\n		data_read[stepIndex][LOCAL] = icmNewNet(nameString);")
	genFile.write("\n		icmConnectPSENet(pse[stepIndex], data_read[stepIndex][LOCAL], \"data_read_4\", ICM_INPUT);")
	genFile.write("\n")
	genFile.write("\n		sprintf(nameString, \"send_data-%d-local\", stepIndex);")
	genFile.write("\n        send_data[stepIndex][LOCAL] = icmNewNet(nameString);")
	genFile.write("\n        icmConnectPSENet(pse[stepIndex], send_data[stepIndex][LOCAL], \"send_data_4\", ICM_OUTPUT);")
	genFile.write("\n")
	genFile.write("\n        sprintf(nameString, \"data_write-%d-local\", stepIndex);")
	genFile.write("\n        data_write[stepIndex][LOCAL] = icmNewNet(nameString);")
	genFile.write("\n        icmConnectPSENet(pse[stepIndex], data_write[stepIndex][LOCAL], \"data_write_4\", ICM_OUTPUT);")
	genFile.write("\n	 }")
	genFile.write("\n    for (stepIndex=0; stepIndex < N_PE; stepIndex++)")
	genFile.write("\n    {")
	genFile.write("\n		printf(\"RouterAddress(%d) 0x%02x\\n\", stepIndex, RouterAddress(stepIndex));")
	genFile.write("\n")
	genFile.write("\n		//EAST CONNECTION")
	genFile.write("\n		if(RouterPosition(stepIndex) != BR && RouterPosition(stepIndex) != CRX && RouterPosition(stepIndex) != TR)")
	genFile.write("\n		{")
	genFile.write("\n			//printf(\"EAST CONNECTION\\n\");")
	genFile.write("\n			sprintf(nameString, \"data_read-%d-east\", stepIndex);")
	genFile.write("\n			data_read[stepIndex][EAST] = icmNewNet(nameString);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex], data_read[stepIndex][EAST], \"data_read_0\", ICM_INPUT);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex+1], data_read[stepIndex][EAST], \"data_write_1\", ICM_OUTPUT);")
	genFile.write("\n		}")
	genFile.write("\n")
	genFile.write("\n		//WEST CONNECTION")
	genFile.write("\n		if(RouterPosition(stepIndex) != BL && RouterPosition(stepIndex) != CL && RouterPosition(stepIndex) != TL)")
	genFile.write("\n		{")
	genFile.write("\n			//printf(\"WEST CONNECTION\\n\");")
	genFile.write("\n			sprintf(nameString, \"data_read-%d-west\", stepIndex);")
	genFile.write("\n			data_read[stepIndex][WEST] = icmNewNet(nameString);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex], data_read[stepIndex][WEST], \"data_read_1\", ICM_INPUT);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex-1], data_read[stepIndex][WEST], \"data_write_0\", ICM_OUTPUT);")
	genFile.write("\n		}")
	genFile.write("\n")
	genFile.write("\n		//NORTH CONNECTION")
	genFile.write("\n		if(RouterPosition(stepIndex) != TL && RouterPosition(stepIndex) != TC && RouterPosition(stepIndex) != TR)")
	genFile.write("\n		{")
	genFile.write("\n			//printf(\"NORTH CONNECTION\\n\");")
	genFile.write("\n			sprintf(nameString, \"data_read-%d-north\", stepIndex);")
	genFile.write("\n			data_read[stepIndex][NORTH] = icmNewNet(nameString);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex], data_read[stepIndex][NORTH], \"data_read_2\", ICM_INPUT);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex+N_PE_X], data_read[stepIndex][NORTH], \"data_write_3\", ICM_OUTPUT);")
	genFile.write("\n		}")
	genFile.write("\n")
	genFile.write("\n		//SOUTH CONNECTION")
	genFile.write("\n		if(RouterPosition(stepIndex) != BL && RouterPosition(stepIndex) != BC && RouterPosition(stepIndex) != BR)")
	genFile.write("\n		{")
	genFile.write("\n			//printf(\"SOUTH CONNECTION\\n\");")
	genFile.write("\n			sprintf(nameString, \"data_read-%d-south\", stepIndex);")
	genFile.write("\n			data_read[stepIndex][SOUTH] = icmNewNet(nameString);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex], data_read[stepIndex][SOUTH], \"data_read_3\", ICM_INPUT);")
	genFile.write("\n			icmConnectPSENet(pse[stepIndex-N_PE_X], data_read[stepIndex][SOUTH], \"data_write_2\", ICM_OUTPUT);")
	genFile.write("\n		}")
	genFile.write("\n		icmAddNetCallback(data_write[stepIndex][LOCAL], Receive, (void*) stepIndex);")
	genFile.write("\n	}")
	genFile.write("\n")

	stepIndex = 0
	aux_x = 0
	aux_y = 0
	aux_noc = 0
	for task in os.listdir(appFolderPath):
		if task.endswith('.c'):
			genFile.write("\n	icmLoadProcessorMemory(processors["+str(stepIndex)+"], \""+appFolderPath+"/"+task[0:len(task)-2]+".IMG_MIPS32R2.elf\", 0, 0, 1);")
			print task[0:len(task)-2]+": "+str(int(aux_x<<8) + aux_y) + " ######### " + str(aux_x) + str(aux_y)
			tasksFile.write("#define "+task[0:len(task)-2]+"\t "+str(int(aux_x<<8) + aux_y)+"\n")
			stepIndex += 1
			aux_noc += 1
			if aux_noc < noc_x:
				aux_x += 1
			else:
				aux_x = 0
				aux_y += 1
				aux_noc = 0

	genFile.write("\n")
	genFile.write("\n    // simulate the platform")
	genFile.write("\n    icmProcessorP final = icmSimulatePlatform();")
	genFile.write("\n")
	genFile.write("\n	// was simulation interrupted or did it complete")
	genFile.write("\n    if(final && (icmGetStopReason(final)==ICM_SR_INTERRUPT)) {")
	genFile.write("\n        icmPrintf(\"*** simulation interrupted\\n\");")
	genFile.write("\n    }")
	genFile.write("\n")
	genFile.write("\n    icmTerminate();")
	genFile.write("\n")
	genFile.write("\n    return 0;")
	genFile.write("\n}")


try:
	print '\033[93m\n\n#####<-  Bare Metal OVP MPSoC Generation  ->#####\033[0m\n'
	print '$ Generating platform...'

	projPath = os.environ['HEMPS_OVP_PATH']
	noc_x = int(sys.argv[1])
	noc_y = int(sys.argv[2])
	app_folder = sys.argv[3]

	print '$ Creating platform file in '+projPath+'/platform_ovp/platform.cpp...'
	genFile = open(projPath+"/platform_ovp/platform.cpp", "w")
	appFolderPath = projPath+"/bareMetal/"+app_folder
	tasksFile = open(appFolderPath+"/tasks_comm.h", "w")
	generate()
	genFile.close()
	tasksFile.close()

	call("echo 'compiling bareMetal';", shell=True)
	call("cd "+appFolderPath+";make clean;make all;", shell=True)
	call("echo;echo;echo 'compiling platform';", shell=True)
	call("make clean;make all;", shell=True)
	call("sleep 5s;./platform.Linux32.exe", shell=True)

except Exception, e:
	print "\n\tExecute: \n\t$ generator.py <noc_x> <noc_y>\n"
	raise
finally:
	pass


